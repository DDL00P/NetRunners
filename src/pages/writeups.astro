---
// Import global styles and components
import "../styles/global.css";
import Layout from "../layouts/Layout.astro";
import WriteupCard from "../components/writeupCard.astro";
import cards from "../data/cards.json";
---

<Layout>
  <div class="py-8 h-[80vh] overflow-x-visible overflow-y-auto px-16 scroll-hover" style="color: var(--theme-text);">
    <div class="mb-6 flex justify-center items-center gap-4">
      <div class="relative w-full max-w-md">
        <svg xmlns="http://www.w3.org/2000/svg" class="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 opacity-60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        <input
          id="writeup-search"
          type="text"
          placeholder="Search by machine name..."
          class="theme-input w-full pl-10 pr-4 py-2 rounded border border-inherit shadow focus:outline-none focus:ring-2 transition-all duration-300 hover:shadow-lg focus:shadow-xl"
          style="background: var(--theme-card); color: var(--theme-card-text); border-color: var(--theme-border);"
          autocomplete="off"
        />
      </div>
      <select
        id="sort-selector"
        class="theme-input px-4 py-2 rounded border border-inherit shadow focus:outline-none focus:ring-2 transition-all duration-300 whitespace-nowrap hover:shadow-lg focus:shadow-xl"
        style="background: var(--theme-card); color: var(--theme-card-text); border-color: var(--theme-border);"
      >
        <option value="newest">Newest first</option>
        <option value="oldest">Oldest first</option>
      </select>
    </div>
    <div id="writeup-list" class="space-y-4 transition-all duration-500">
      {cards.map(card => (
        <WriteupCard
          id={`modal-${card.title.replace(/\s+/g, '-')}`}
          title={card.title}
          description={card.description}
          date={card.date}
          type={card.type}
          image={card.image}
          links={card.links}
        />
      ))}
    </div>
    <div id="no-results" class="hidden text-center text-sm opacity-60 mt-8 transition-all duration-300 transform">No writeups found with that title.</div>
  </div>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const input = document.getElementById('writeup-search') as HTMLInputElement;
      const list = document.getElementById('writeup-list');
      const noResults = document.getElementById('no-results');
      const sortSelector = document.getElementById('sort-selector') as HTMLSelectElement;
      
      if (!input || !list || !noResults || !sortSelector) return;
      
      const cards = list.querySelectorAll('.writeup-card');
      
      input.addEventListener('input', function() {
        const value = input.value.trim().toLowerCase();
        let visibleCount = 0;
        
        cards.forEach((card, index) => {
          const element = card as HTMLElement;
          const title = element.getAttribute('data-title') || '';
          
          if (title.includes(value)) {
            element.style.display = '';
            // Staggered animation for visible cards
            setTimeout(() => {
              element.style.opacity = '1';
              element.style.transform = 'scale(1) translateY(0)';
            }, index * 50);
            visibleCount++;
          } else {
            element.style.opacity = '0';
            element.style.transform = 'scale(0.95) translateY(-10px)';
            // Hide after animation completes
            setTimeout(() => {
              if (!title.includes(value)) {
                element.style.display = 'none';
              }
            }, 200);
          }
        });
        
        // Smooth transition for no results message
        if (visibleCount === 0) {
          noResults.style.opacity = '0';
          setTimeout(() => {
            noResults.classList.remove('hidden');
            noResults.style.opacity = '1';
            noResults.style.transform = 'scale(1)';
          }, 300);
        } else {
          noResults.style.opacity = '0';
          noResults.style.transform = 'scale(0.95)';
          setTimeout(() => {
            noResults.classList.add('hidden');
          }, 200);
        }
      });

      sortSelector.addEventListener('change', function() {
        const selectedValue = sortSelector.value;
        const visibleCards = Array.from(cards).filter(card => 
          (card as HTMLElement).style.display !== 'none'
        );
        
        const sortedCards = visibleCards.sort((a, b) => {
          const dateA = new Date((a as HTMLElement).getAttribute('data-date') || '').getTime();
          const dateB = new Date((b as HTMLElement).getAttribute('data-date') || '').getTime();

          if (selectedValue === 'newest') {
            return dateB - dateA; // Newest first
          } else {
            return dateA - dateB; // Oldest first
          }
        });

        // Smooth reordering with staggered animations
        sortedCards.forEach((card, index) => {
          const element = card as HTMLElement;
          element.style.opacity = '0';
          element.style.transform = 'scale(0.95) translateY(-20px)';
          
          setTimeout(() => {
            list.appendChild(element);
            setTimeout(() => {
              element.style.opacity = '1';
              element.style.transform = 'scale(1) translateY(0)';
            }, 50);
          }, index * 100);
        });
      });
      
      // Focus en el input al cargar la p√°gina
      input.focus();
    });
  </script>
</Layout>