---
// Import global styles and components
import "../styles/global.css";
import Layout from "../layouts/Layout.astro";
import WriteupCard from "../components/writeupCard.astro";
import cards from "../data/cards.json";
---

<!-- JSON-LD Article for each writeup -->
{cards.map(card => (
  <script type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "Article",
      "headline": card.title,
      "description": card.description,
      "image": card.image,
      "author": {
        "@type": "Organization",
        "name": "NetRunners Team"
      },
      "publisher": {
        "@type": "Organization",
        "name": "NetRunners",
        "logo": {
          "@type": "ImageObject",
          "url": "https://netrunners.in/favicon.svg"
        }
      },
      "datePublished": card.date,
      "mainEntityOfPage": `https://netrunners.in/writeups#${encodeURIComponent(card.title.replace(/\s+/g, '-'))}`
    })}
  </script>
))}

<Layout>
  <div class="py-8 h-[80vh] overflow-x-visible overflow-y-auto px-16 scroll-hover" style="color: var(--theme-text);">
    <div class="mb-6 flex flex-col lg:flex-row justify-center items-center gap-4">
      <div class="relative w-full max-w-md">
        <svg xmlns="http://www.w3.org/2000/svg" class="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 opacity-60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        <input
          id="writeup-search"
          type="text"
          placeholder="Search by machine name..."
          class="theme-input w-full pl-10 pr-4 py-2 rounded border border-inherit shadow focus:outline-none focus:ring-2 transition-all duration-300 hover:shadow-lg focus:shadow-xl"
          style="background: var(--theme-card); color: var(--theme-card-text); border-color: var(--theme-border);"
          autocomplete="off"
        />
      </div>
      <div class="flex flex-col sm:flex-row gap-2 lg:gap-4 w-full lg:w-auto">
        <select
          id="difficulty-filter"
          class="theme-input px-4 py-2 rounded border border-inherit shadow focus:outline-none focus:ring-2 transition-all duration-300 whitespace-nowrap hover:shadow-lg focus:shadow-xl"
          style="background: var(--theme-card); color: var(--theme-card-text); border-color: var(--theme-border);"
        >
          <option value="all">All difficulties</option>
          <option value="easy">Easy</option>
          <option value="medium">Medium</option>
          <option value="hard">Hard</option>
          <option value="insane">Insane</option>
        </select>
        <select
          id="sort-selector"
          class="theme-input px-4 py-2 rounded border border-inherit shadow focus:outline-none focus:ring-2 transition-all duration-300 whitespace-nowrap hover:shadow-lg focus:shadow-xl"
          style="background: var(--theme-card); color: var(--theme-card-text); border-color: var(--theme-border);"
        >
          <option value="newest">Newest first</option>
          <option value="oldest">Oldest first</option>
        </select>
      </div>
    </div>
    <div id="writeup-list" class="space-y-4 transition-all duration-500">
      {cards.map(card => (
        <WriteupCard
          id={`modal-${card.title.replace(/\s+/g, '-')}`}
          title={card.title}
          description={card.description}
          date={card.date}
          type={card.type}
          image={card.image}
          links={card.links}
        />
      ))}
    </div>
    <div id="no-results" class="hidden text-center text-sm opacity-60 mt-8 transition-all duration-300 transform">No writeups found with that title.</div>
  </div>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const input = document.getElementById('writeup-search') as HTMLInputElement;
      const list = document.getElementById('writeup-list');
      const noResults = document.getElementById('no-results');
      const sortSelector = document.getElementById('sort-selector') as HTMLSelectElement;
      const difficultyFilter = document.getElementById('difficulty-filter') as HTMLSelectElement;
      
      if (!input || !list || !noResults || !sortSelector || !difficultyFilter) return;
      
      const cards = list.querySelectorAll('.writeup-card');
      
      // Function to filter and display cards
      function filterCards() {
        const searchValue = input.value.trim().toLowerCase();
        const difficultyValue = difficultyFilter.value;
        let visibleCount = 0;
        
        cards.forEach((card, index) => {
          const element = card as HTMLElement;
          const title = element.getAttribute('data-title') || '';
          const difficulty = element.getAttribute('data-difficulty') || '';
          
          const matchesSearch = title.includes(searchValue);
          const matchesDifficulty = difficultyValue === 'all' || difficulty === difficultyValue;
          
          if (matchesSearch && matchesDifficulty) {
            element.style.display = '';
            // Staggered animation for visible cards
            setTimeout(() => {
              element.style.opacity = '1';
              element.style.transform = 'scale(1) translateY(0)';
            }, index * 50);
            visibleCount++;
          } else {
            element.style.opacity = '0';
            element.style.transform = 'scale(0.95) translateY(-10px)';
            // Hide after animation completes
            setTimeout(() => {
              if (!title.includes(searchValue) || (difficultyValue !== 'all' && difficulty !== difficultyValue)) {
                element.style.display = 'none';
              }
            }, 200);
          }
        });
        
        // Smooth transition for no results message
        if (visibleCount === 0) {
          if (noResults) {
            noResults.style.opacity = '0';
            setTimeout(() => {
              if (noResults) {
                noResults.classList.remove('hidden');
                noResults.style.opacity = '1';
                noResults.style.transform = 'scale(1)';
              }
            }, 300);
          }
        } else {
          if (noResults) {
            noResults.style.opacity = '0';
            noResults.style.transform = 'scale(0.95)';
            setTimeout(() => {
              if (noResults) {
                noResults.classList.add('hidden');
              }
            }, 200);
          }
        }
      }

      input.addEventListener('input', filterCards);
      difficultyFilter.addEventListener('change', filterCards);

      sortSelector.addEventListener('change', function() {
        const selectedValue = sortSelector.value;
        const visibleCards = Array.from(cards).filter(card => 
          (card as HTMLElement).style.display !== 'none'
        );
        
        const sortedCards = visibleCards.sort((a, b) => {
          const dateA = new Date((a as HTMLElement).getAttribute('data-date') || '').getTime();
          const dateB = new Date((b as HTMLElement).getAttribute('data-date') || '').getTime();

          if (selectedValue === 'newest') {
            return dateB - dateA; // Newest first
          } else {
            return dateA - dateB; // Oldest first
          }
        });

        // Faster, more synchronized reordering
        sortedCards.forEach((card, index) => {
          const element = card as HTMLElement;
          element.style.opacity = '0';
          element.style.transform = 'scale(0.97) translateY(-10px)';
          setTimeout(() => {
            list.appendChild(element);
            setTimeout(() => {
              element.style.opacity = '1';
              element.style.transform = 'scale(1) translateY(0)';
            }, 10); // minimal delay for smoother sync
          }, index * 20); // much faster stagger
        });
      });
      
      // Focus en el input al cargar la p√°gina
      input.focus();
    });
  </script>
</Layout>