---
// Import global styles and components
import "../styles/global.css";
import Layout from "../layouts/Layout.astro";
import CommandBox from "../components/CommandBox.astro";
import InputBox from "../components/InputBox.astro";

// Import commands data and types
import commandsData from "../data/commands.json";
import type { CommandData } from "../types/commands";

// Parse commands into useful structures
const commands: CommandData = commandsData;
const tabs = Object.keys(commands);
const categories = Array.from(
	new Set(Object.values(commands).flatMap((section) => Object.keys(section))),
);
---

<Layout>
	<!-- Main container with dark theme and monospace font -->
	<main class="h-screen bg-gray-950 text-white font-mono p-4 overflow-hidden">
		<!-- Bordered panel centered on screen -->
		<div
			class="h-full max-w-screen-lg mx-auto border-2 border-white p-4 rounded-xl flex flex-col"
		>
			<!-- Header with title and navigation buttons -->
			<div
				class="flex justify-between items-center mb-4 border-b border-white pb-2"
			>
				<div class="text-xl font-bold tracking-wider">NetRunners</div>
				<nav class="space-x-4">
					<button class="text-white hover:underline">COMMANDS</button>
					<button class="text-white hover:underline">WRITEUPS</button>
					<button class="text-white hover:underline">SUPPORT</button>
					<button class="text-white hover:underline">About</button>
				</nav>
			</div>

			<!-- 3-column grid: input form and command section -->
			<div class="grid grid-cols-3 gap-4 flex-grow overflow-hidden">
				<!-- Left column: input form -->
				<div class="space-y-7 pt-3" id="input-form">
					<InputBox label="IP" />
					<InputBox label="PORT" />
					<InputBox label="USER" />
					<InputBox label="PASSWORD" />
					<InputBox label="DOMAIN" />
				</div>

				<!-- Right columns: command section -->
				<div class="col-span-2 flex flex-col overflow-hidden">
					<!-- Tab navigation buttons -->
					<div class="flex space-x-2 border-b border-white pb-2 mb-2">
						{
							tabs.map((tab, index) => (
								<button
									class={`tab-btn px-4 py-1 border border-white rounded-md ${index === 0 ? "bg-white text-black" : "text-white"}`}
									data-tab={tab}
								>
									{tab.toUpperCase()}
								</button>
							))
						}
					</div>

					<!-- Category filter checkboxes -->
					<div class="mb-3">
						<div class="flex flex-wrap gap-2">
							{
								categories.map((cat) => (
									<label class="flex items-center space-x-1">
										<input
											type="checkbox"
											value={cat}
											class="category-filter"
											checked
										/>
										<span class="capitalize text-sm">
											{cat}
										</span>
									</label>
								))
							}
						</div>
					</div>

					<!-- Command display area (tabs and filters apply) -->
					<div
						class="space-y-2 border-2 overflow-hidden border-white p-1 rounded-xl"
					>
						<div
							id="tab-content"
							class="scroll-hover overflow-y-auto flex-grow h-full p-1"
						>
							{
								tabs.map((tab, index) => (
									<div
										data-tab-content={tab}
										class={`${index !== 0 ? "hidden" : ""} space-y-2`}
									>
										{Object.entries(commands[tab]).flatMap(
											([category, cmds]) =>
												cmds.map((cmd) => (
													<div
														data-category={category}
													>
														<CommandBox
															command={cmd}
														/>
													</div>
												)),
										)}
									</div>
								))
							}
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- Interactive scripts for tabs, inputs, and filters -->
		<script>
			// Tab switching logic
			const tabButtons = document.querySelectorAll(".tab-btn");
			const tabContents = document.querySelectorAll("[data-tab-content]");

			tabButtons.forEach((btn) => {
				btn.addEventListener("click", () => {
					tabButtons.forEach((b) => {
						b.classList.remove("bg-white", "text-black");
						b.classList.add("text-white");
					});
					btn.classList.add("bg-white", "text-black");
					btn.classList.remove("text-white");

					const target = (btn as HTMLElement).dataset.tab;
					tabContents.forEach((content) => {
						content.classList.toggle(
							"hidden",
							(content as HTMLElement).dataset.tabContent !==
								target,
						);
					});
					applyCategoryFilter();
				});
			});

			// Select all input elements inside the container with ID "input-form"
			const inputs = document.querySelectorAll("#input-form input");

			// Function to update placeholders (like {{IP}}, {{PORT}}, etc.) in command spans
			const updateCommands = () => {
				// Create an object to store input values keyed by label text (e.g., { IP: "127.0.0.1" })
				const values: Record<string, string> = {};

				inputs.forEach((input) => {
					const htmlInput = input as HTMLInputElement;

					// Find the associated <label> using the input's ID
					const label = document.querySelector(
						`label[for="${htmlInput.id}"]`,
					);
					// Get the label text, trim whitespace, and convert to uppercase (e.g., "IP")
					const labelText = label?.textContent?.trim().toUpperCase();

					// Store the value if a matching label is found
					if (labelText) values[labelText] = htmlInput.value;
				});

				// Find all spans inside elements that have the "data-tab-content" attribute
				document
					.querySelectorAll("[data-tab-content] span")
					.forEach((span) => {
						const el = span as HTMLSpanElement;

						// Use the original text content (or a stored raw version) for replacement
						let raw = el.dataset.raw || el.textContent || "";

						// Save the original text to the dataset (so we don't lose it after replacements)
						el.dataset.raw = raw;

						// Replace placeholders like {{IP}}, {{PORT}}, etc. with the corresponding input values
						Object.entries(values).forEach(([key, value]) => {
							raw = raw.replaceAll(`{{${key}}}`, value);
						});

						// Update the text content of the span with the replaced version
						el.textContent = raw;
					});
			};

			// Attach the update function to each input's "input" event (fires on every keystroke)
			inputs.forEach((input) =>
				input.addEventListener("input", updateCommands),
			);

			// Clipboard copy functionality
			document.querySelectorAll("button").forEach((button) => {
				if (button.textContent?.trim() === "COPY") {
					button.addEventListener("click", () => {
						const span =
							button.parentElement?.querySelector("span");
						if (!span) return;
						const command = span.textContent;
						if (!command) return;
						navigator.clipboard.writeText(command).then(() => {
							button.textContent = "COPIED!";
							button.classList.remove("bg-white");
							button.classList.add("bg-green-600");
							setTimeout(() => {
								button.textContent = "COPY";
								button.classList.add("bg-white");
								button.classList.remove("bg-green-600");
							}, 1000);
						});
					});
				}
			});

			// Category filter logic
			const applyCategoryFilter = () => {
				const checked = Array.from(
					document.querySelectorAll(".category-filter:checked"),
				).map((i) => (i as HTMLInputElement).value);
				document
					.querySelectorAll("[data-tab-content]")
					.forEach((tabContent) => {
						tabContent
							.querySelectorAll("[data-category]")
							.forEach((el) => {
								const category = (el as HTMLElement).dataset
									.category;
								el.classList.toggle(
									"hidden",
									!checked.includes(category || ""),
								);
							});
					});
			};

			document.querySelectorAll(".category-filter").forEach((cb) => {
				cb.addEventListener("change", applyCategoryFilter);
			});
		</script>
	</main>
</Layout>
