---
// Import the list of themes from a JSON file and type it using a custom TypeScript type
import themes from "../../public/themes.json";

// Extract theme names for the selector build-time (optional)
const themeNames = Object.keys(themes);
---

<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>NetRunners</title>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <!-- OpenGraph meta tags -->
        <meta property="og:title" content="NetRunners" />
        <meta property="og:description" content="A curated collection of hacking commands, writeups, and resources for pentesters and CTF players." />
        <meta property="og:image" content="/favicon.svg" />
        <meta property="og:url" content="https://netrunners.in/" />
        <meta property="og:type" content="website" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content="NetRunners" />
        <meta name="twitter:description" content="A curated collection of hacking commands, writeups, and resources for pentesters and CTF players." />
        <meta name="twitter:image" content="/favicon.svg" />
		<!-- prevent FOUC by applying theme class before paint -->
		<style>html{visibility:hidden}</style>
		<script is:inline>
		(function(){
		  try{
		    const saved = localStorage.getItem('selectedTheme') || 'default';
		    document.documentElement.classList.add(`theme-${saved}`);
		    document.body.classList.add(`theme-${saved}`);
		  }catch(_){/* ignore */}
		  document.documentElement.style.visibility='visible';
		})();
		</script>
	</head>
	<body style="background: var(--theme-bg); color: var(--theme-text);">
		<!-- Dropdown to select a theme -->
		<div class="fixed top-1 right-1 z-50">
			<select
				id="theme-selector"
				class="px-2 py-1 rounded-xl transition-colors duration-300 border-2 border-inherit"
				style="background: var(--theme-card); color: var(--theme-card-text); border-color: var(--theme-border);"
			>

			</select>
		</div>

		<!-- Main content area where the theme is applied -->
		<div
			id="theme-wrapper"
			class="min-h-screen transition-colors duration-300"
			style="background: var(--theme-bg); color: var(--theme-text);"
		>
			<main class="h-screen font-mono p-4 overflow-hidden">
					<div
						class="h-full max-w-screen-2xl mx-auto border-2 p-4 rounded-xl flex flex-col border-inherit"
						id="theme-panel"
						style="background: var(--theme-card); color: var(--theme-card-text); border-color: var(--theme-border);"
					>
						<div
							class="flex justify-between items-center mb-4 border-b pb-2 border-inherit"
							id="theme-header"
							style="border-color: var(--theme-border);"
						>
							<div class="text-xl font-bold tracking-wider">NETRUNNERS</div>
							<nav class="space-x-4">
								<a href="/">
									<button class="hover:underline">COMMANDS</button>
								</a>
								<a href="/writeups">
									<button class="hover:underline">WRITEUPS</button>
								</a>
								<a href="/support">
									<button class="hover:underline">SUPPORT</button>
								</a>
								<a href="/about">
									<button class="hover:underline">ABOUT</button>
								</a>
							</nav>
						</div>
					<slot />
				</div>
			</main>
		</div>

		<script type="module">
			// get references to HTML elements
			const selector = document.getElementById("theme-selector");
			const body = document.body;
			const tabs = document.querySelectorAll(".theme-tab");
			const commandsBoxes = document.querySelectorAll(".commandsBG");
			const commandsBoxText =
				document.querySelectorAll(".commandsTextColor");

			// fetch theme data from JSON file and handle theme switching
			fetch("themes.json")
				.then((response) => response.json())
				.then((themeData) => {
					const themeNames = Object.keys(themeData);
					// Poblar el selector si no se hace en el template
					if (selector.options.length === 0) {
						themeNames.forEach((name) => {
							const option = document.createElement('option');
							option.value = name;
							option.textContent = name.toUpperCase();
							selector.appendChild(option);
						});
					}
					// function to apply the selected theme
					const applyTheme = (themeName) => {
						themeNames.forEach((name) => {
							body.classList.remove(`theme-${name}`);
						});
						body.classList.add(`theme-${themeName}`);
						localStorage.setItem("selectedTheme", themeName);
					};

					// listen for theme change events
					selector.addEventListener("change", (e) => {
						const themeName = e.target.value;
						applyTheme(themeName);
					});

					// apply saved theme from localStorage or use default
					const savedTheme =
						localStorage.getItem("selectedTheme") || "default";
					selector.value = savedTheme;
					applyTheme(savedTheme);
				})
				.catch((err) => {
					console.error("Error loading themes.json:", err);
				});
		</script>
	</body>
</html>
