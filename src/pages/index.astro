---
import "../styles/global.css";
import Layout from "../layouts/Layout.astro";
import CommandBox from "../components/CommandBox.astro";
import InputBox from "../components/InputBox.astro";

import commandsData from "../data/commands.json";
import type { CommandData } from "../types/commands";

const commands: CommandData = commandsData;
const tabs = Object.keys(commands);
---

<Layout>
	<main class="h-screen bg-gray-950 text-white font-mono p-4 overflow-hidden">
		<div
			class="h-full max-w-screen-lg mx-auto border-2 border-white p-4 rounded-xl flex flex-col"
		>
			<!-- Header -->
			<div
				class="flex justify-between items-center mb-4 border-b border-white pb-2"
			>
				<div class="text-xl font-bold tracking-wider">NetRunners</div>
				<nav class="space-x-4">
					<button class="text-white hover:underline">COMMANDS</button>
					<button class="text-white hover:underline">WRITEUPS</button>
					<button class="text-white hover:underline">SUPPORT</button>
					<button class="text-white hover:underline">About</button>
				</nav>
			</div>

			<div class="grid grid-cols-3 gap-4 flex-grow overflow-hidden">
				<!-- Left Form Inputs -->
				<div class="space-y-4" id="input-form">
					<InputBox label="IP" />
					<InputBox label="PUERTO" />
					<InputBox label="USUARIO" />
					<InputBox label="CONTRASEÃ‘A" />
					<InputBox label="DOMINIO" />
				</div>

				<!-- Command Section -->
				<div class="col-span-2 flex flex-col overflow-hidden">
					<div class="flex space-x-2 border-b border-white pb-2 mb-2">
						{
							tabs.map((tab, index) => (
								<button
									class={`tab-btn px-4 py-1 border border-white rounded-md ${index === 0 ? "bg-white text-black" : "text-white"}`}
									data-tab={tab}
								>
									{tab.toUpperCase()}
								</button>
							))
						}
					</div>

					<div
						id="tab-content"
						class="space-y-2 flex-grow overflow-y-auto pr-2"
					>
						{
							tabs.map((tab, index) => (
								<div
									data-tab-content={tab}
									class={`${index !== 0 ? "hidden" : ""} space-y-2`}
								>
									{Object.values(commands[tab])
										.flat()
										.map((cmd) => (
											<CommandBox command={cmd} />
										))}
								</div>
							))
						}
					</div>
				</div>
			</div>
		</div>

		<!-- Script para tab-switching y sustitucion de variables -->
		<script>
			const tabButtons = document.querySelectorAll(".tab-btn");
			const tabContents = document.querySelectorAll("[data-tab-content]");

			// FIX: Narrow 'btn' to HTMLButtonElement to access dataset

			tabButtons.forEach((btn) => {
				btn.addEventListener("click", () => {
					tabButtons.forEach((b) => {
						b.classList.remove("bg-white", "text-black");
						b.classList.add("text-white");
					});
					btn.classList.add("bg-white", "text-black");
					btn.classList.remove("text-white");

					const target = (btn as HTMLButtonElement).dataset.tab;
					tabContents.forEach((content) => {
						content.classList.toggle(
							"hidden",
							(content as HTMLElement).dataset.tabContent !==
								target,
						);
					});
				});
			});

			const inputs = document.querySelectorAll("#input-form input");
			const updateCommands = () => {
				const values: Record<string, string> = {};
				inputs.forEach((input) => {
					const label = input.previousElementSibling?.textContent
						?.trim()
						.toUpperCase();
					if (label) {
						values[label] = (input as HTMLInputElement).value;
					}
				});
				document
					.querySelectorAll("[data-tab-content] span")
					.forEach((span) => {
						const el = span as HTMLSpanElement;
						let raw = el.dataset.raw || el.textContent || "";
						el.dataset.raw = raw;
						Object.entries(values).forEach(([key, value]) => {
							raw = raw.replaceAll(`{{${key}}}`, value);
						});
						el.textContent = raw;
					});
			};

			inputs.forEach((input) =>
				input.addEventListener("input", updateCommands),
			);
		</script>
	</main>
</Layout>
