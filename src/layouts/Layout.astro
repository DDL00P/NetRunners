---
// Import the list of themes from a JSON file and type it using a custom TypeScript type
import themes from "../../public/themes.json";
import type { ThemeData } from "../types/types.ts";

// Assign the imported data to a constant and extract the keys (theme names)
const themeList: ThemeData = themes;
const themeNames = Object.keys(themeList);
---

<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>NetRunners</title>
	</head>
	<body data-theme="default">
		<!-- Dropdown to select a theme -->
		<div class="fixed top-1 right-1 z-50">
			<select
				id="theme-selector"
				class="px-2 py-1 rounded-xl transition-colors duration-300 border-2"
			>
				{
					themeNames.map((name) => (
						<option value={name}>{name.toUpperCase()}</option>
					))
				}
			</select>
		</div>

		<!-- Main content area where the theme is applied -->
		<div
			id="theme-wrapper"
			class="min-h-screen transition-colors duration-300"
		>
			<main class="h-screen font-mono p-4 overflow-hidden">
					<div
						class="h-full max-w-screen-2xl mx-auto border-2 p-4 rounded-xl flex flex-col"
						id="theme-panel"
					>
						<div
							class="flex justify-between items-center mb-4 border-b pb-2"
							id="theme-header"
						>
							<div class="text-xl font-bold tracking-wider">NETRUNNERS</div>
							<nav class="space-x-4">
								<a href="/">
									<button class="hover:underline">COMMANDS</button>
								</a>
								<button class="hover:underline">WRITEUPS</button>
								<button class="hover:underline">SUPPORT</button>
								<button class="hover:underline">About</button>
							</nav>
						</div>
					<slot />
				</div>
			</main>
		</div>

		<script type="module">
			// Get references to HTML elements
			const selector = document.getElementById("theme-selector");
			const wrapper = document.getElementById("theme-wrapper");
			const tabs = document.querySelectorAll(".theme-tab");
			const commandsBoxes = document.querySelectorAll(".commandsBG");
			const commandsBoxText =
				document.querySelectorAll(".commandsTextColor");

			// Fetch theme data from JSON file and handle theme switching
			fetch("themes.json")
				.then((response) => response.json())
				.then((themeData) => {
					// Function to apply the selected theme
					const applyTheme = (themeName) => {
						const theme = themeData[themeName] || themeData.default;

						// Remove all existing theme-related classes
						Object.values(themeData).forEach((t) => {
							wrapper.classList.remove(
								t.bg,
								t.text,
								t.tabBg,
								...t.border.split(" "),
							);
							selector.classList.remove(
								t.bg,
								t.text,
								...t.border.split(" "),
							);
							tabs.forEach((tab) =>
								tab.classList.remove(t.tabBg),
							);
							commandsBoxes.forEach((commandsBox) =>
								commandsBox.classList.remove(t.commandsBG),
							);
							commandsBoxText.forEach((commandsText) =>
								commandsText.classList.remove(
									t.commandsTextColor,
								),
							);
						});

						// Add new classes for the selected theme
						wrapper.classList.add(
							theme.bg,
							theme.text,
							...theme.border.split(" "),
						);
						selector.classList.add(
							theme.bg,
							theme.text,
							...theme.border.split(" "),
						);

						tabs.forEach((tab) => tab.classList.add(theme.tabBg));
						commandsBoxes.forEach((commandsBox) =>
							commandsBox.classList.add(theme.commandsBG),
						);
						commandsBoxText.forEach((commandsText) =>
							commandsText.classList.add(theme.commandsTextColor),
						);

						// Save the selected theme to localStorage
						localStorage.setItem("selectedTheme", themeName);
					};

					// Listen for theme change events
					selector.addEventListener("change", (e) => {
						const themeName = e.target.value;
						applyTheme(themeName);
					});

					// Apply saved theme from localStorage or use default
					const savedTheme =
						localStorage.getItem("selectedTheme") || "default";
					selector.value = savedTheme;
					applyTheme(savedTheme);
				})
				.catch((err) => {
					console.error("Error loading themes.json:", err);
				});
		</script>
	</body>
</html>
